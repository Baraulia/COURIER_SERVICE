// Code generated by MockGen. DO NOT EDIT.
// Source: Service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	db "github.com/Baraulia/COURIER_SERVICE/db"
	gomock "github.com/golang/mock/gomock"
)

// MockDeliveryApp is a mock of DeliveryApp interface.
type MockDeliveryApp struct {
	ctrl     *gomock.Controller
	recorder *MockDeliveryAppMockRecorder
}

// MockDeliveryAppMockRecorder is the mock recorder for MockDeliveryApp.
type MockDeliveryAppMockRecorder struct {
	mock *MockDeliveryApp
}

// NewMockDeliveryApp creates a new mock instance.
func NewMockDeliveryApp(ctrl *gomock.Controller) *MockDeliveryApp {
	mock := &MockDeliveryApp{ctrl: ctrl}
	mock.recorder = &MockDeliveryAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeliveryApp) EXPECT() *MockDeliveryAppMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockDeliveryApp) GetOrder(id int) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", id)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOrder indicates an expected call of GetOneOrder.
func (mr *MockDeliveryAppMockRecorder) GetOneOrder(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockDeliveryApp)(nil).GetOrder), id)
}

// GetOrders mocks base method.
func (m *MockDeliveryApp) GetOrders() ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders")
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockDeliveryAppMockRecorder) GetOrders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockDeliveryApp)(nil).GetOrders))
}
