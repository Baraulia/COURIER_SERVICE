// Code generated by MockGen. DO NOT EDIT.
// Source: Repository.go

// Package mock_dao is a generated GoMock package.
package mock_dao

import (
	reflect "reflect"

	model "github.com/Baraulia/COURIER_SERVICE/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderRep is a mock of OrderRep interface.
type MockOrderRep struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepMockRecorder
}

// MockOrderRepMockRecorder is the mock recorder for MockOrderRep.
type MockOrderRepMockRecorder struct {
	mock *MockOrderRep
}

// NewMockOrderRep creates a new mock instance.
func NewMockOrderRep(ctrl *gomock.Controller) *MockOrderRep {
	mock := &MockOrderRep{ctrl: ctrl}
	mock.recorder = &MockOrderRepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRep) EXPECT() *MockOrderRepMockRecorder {
	return m.recorder
}

// ChangeOrderStatusInDB mocks base method.
func (m *MockOrderRep) ChangeOrderStatusInDB(status string, id uint16) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrderStatusInDB", status, id)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeOrderStatusInDB indicates an expected call of ChangeOrderStatusInDB.
func (mr *MockOrderRepMockRecorder) ChangeOrderStatusInDB(status, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatusInDB", reflect.TypeOf((*MockOrderRep)(nil).ChangeOrderStatusInDB), status, id)
}

// GetActiveOrderFromDB mocks base method.
func (m *MockOrderRep) GetActiveOrderFromDB(id int) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveOrderFromDB", id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveOrderFromDB indicates an expected call of GetActiveOrderFromDB.
func (mr *MockOrderRepMockRecorder) GetActiveOrderFromDB(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveOrderFromDB", reflect.TypeOf((*MockOrderRep)(nil).GetActiveOrderFromDB), id)
}

// GetActiveOrdersFromDB mocks base method.
func (m *MockOrderRep) GetActiveOrdersFromDB(id int) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveOrdersFromDB", id)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveOrdersFromDB indicates an expected call of GetActiveOrdersFromDB.
func (mr *MockOrderRepMockRecorder) GetActiveOrdersFromDB(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveOrdersFromDB", reflect.TypeOf((*MockOrderRep)(nil).GetActiveOrdersFromDB), id)
}

// GetAllOrdersOfCourierServiceWithPage_fromDB mocks base method.
func (m *MockOrderRep) GetAllOrdersOfCourierServiceWithPage_fromDB(limit, page, idService int) ([]model.Order, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrdersOfCourierServiceWithPage_fromDB", limit, page, idService)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetAllOrdersOfCourierServiceWithPage_fromDB indicates an expected call of GetAllOrdersOfCourierServiceWithPage_fromDB.
func (mr *MockOrderRepMockRecorder) GetAllOrdersOfCourierServiceWithPage_fromDB(limit, page, idService interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrdersOfCourierServiceWithPage_fromDB", reflect.TypeOf((*MockOrderRep)(nil).GetAllOrdersOfCourierServiceWithPage_fromDB), limit, page, idService)
}

// GetCourierCompletedOrdersByMouthWithPage_fromDB mocks base method.
func (m *MockOrderRep) GetCourierCompletedOrdersByMouthWithPage_fromDB(limit, page, idCourier, Month, Year int) ([]model.Order, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierCompletedOrdersByMouthWithPage_fromDB", limit, page, idCourier, Month, Year)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetCourierCompletedOrdersByMouthWithPage_fromDB indicates an expected call of GetCourierCompletedOrdersByMouthWithPage_fromDB.
func (mr *MockOrderRepMockRecorder) GetCourierCompletedOrdersByMouthWithPage_fromDB(limit, page, idCourier, Month, Year interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierCompletedOrdersByMouthWithPage_fromDB", reflect.TypeOf((*MockOrderRep)(nil).GetCourierCompletedOrdersByMouthWithPage_fromDB), limit, page, idCourier, Month, Year)
}

// GetCourierCompletedOrdersWithPage_fromDB mocks base method.
func (m *MockOrderRep) GetCourierCompletedOrdersWithPage_fromDB(limit, page, idCourier int) ([]model.DetailedOrder, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierCompletedOrdersWithPage_fromDB", limit, page, idCourier)
	ret0, _ := ret[0].([]model.DetailedOrder)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetCourierCompletedOrdersWithPage_fromDB indicates an expected call of GetCourierCompletedOrdersWithPage_fromDB.
func (mr *MockOrderRepMockRecorder) GetCourierCompletedOrdersWithPage_fromDB(limit, page, idCourier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierCompletedOrdersWithPage_fromDB", reflect.TypeOf((*MockOrderRep)(nil).GetCourierCompletedOrdersWithPage_fromDB), limit, page, idCourier)
}

// MockCourierRep is a mock of CourierRep interface.
type MockCourierRep struct {
	ctrl     *gomock.Controller
	recorder *MockCourierRepMockRecorder
}

// MockCourierRepMockRecorder is the mock recorder for MockCourierRep.
type MockCourierRepMockRecorder struct {
	mock *MockCourierRep
}

// NewMockCourierRep creates a new mock instance.
func NewMockCourierRep(ctrl *gomock.Controller) *MockCourierRep {
	mock := &MockCourierRep{ctrl: ctrl}
	mock.recorder = &MockCourierRepMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourierRep) EXPECT() *MockCourierRepMockRecorder {
	return m.recorder
}

// GetCourierFromDB mocks base method.
func (m *MockCourierRep) GetCourierFromDB(id uint16) (*model.SmallInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierFromDB", id)
	ret0, _ := ret[0].(*model.SmallInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierFromDB indicates an expected call of GetCourierFromDB.
func (mr *MockCourierRepMockRecorder) GetCourierFromDB(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierFromDB", reflect.TypeOf((*MockCourierRep)(nil).GetCourierFromDB), id)
}

// GetCouriersFromDB mocks base method.
func (m *MockCourierRep) GetCouriersFromDB() ([]model.SmallInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouriersFromDB")
	ret0, _ := ret[0].([]model.SmallInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouriersFromDB indicates an expected call of GetCouriersFromDB.
func (mr *MockCourierRepMockRecorder) GetCouriersFromDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouriersFromDB", reflect.TypeOf((*MockCourierRep)(nil).GetCouriersFromDB))
}

// SaveCourierInDB mocks base method.
func (m *MockCourierRep) SaveCourierInDB(Courier *model.Courier) (uint16, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCourierInDB", Courier)
	ret0, _ := ret[0].(uint16)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCourierInDB indicates an expected call of SaveCourierInDB.
func (mr *MockCourierRepMockRecorder) SaveCourierInDB(Courier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCourierInDB", reflect.TypeOf((*MockCourierRep)(nil).SaveCourierInDB), Courier)
}
